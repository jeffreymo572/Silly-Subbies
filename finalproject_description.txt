Keyboard Interactivity (Yawer): The player can move the submarine with the use of 'wasd' and shoot with the space bar. I implemented an array of booleans for player inputs to allow for multiple keyboard inputs since processing only stores the last key the user inputted. This allows for diagonal movement as well as moving while shooting. I implemented acceleration-based movement to allow it to be a smoother experience. We also made the decision to have the submarine accelerate slower as it was going forward as a way to simulate going against a current. 

Data Input/Output (Yawer): I have implemented a highscore system to allow the saving and loading of a highscore. If the current run's score is higher than your highscore, it will save it as your new highscore and this will be loaded when you open the game again.

GUI (Jeffrey): The GUI features three distinct scenes: the main menu, the paused screen, and the current game screen. The main menu has two buttons: the play game button which will switch the scene from the main menu to an initialized game. The controls button will pull up a text box describing the controls.The paused screen scene can be activated during an active game by pressing "P" which will pause the game and prompt the user to unpause by pressing "P" again or pressing the resume button. The current game screen displays the current game as well as the high score at the top left. 

Sound (Jeffrey): The sound system features a SoundBoard class which controls which sounds are played. In the main menu and in game, the soundboard features looping background music depending on the scene. When the player shoots, dies, or kills an octopus, the soundboard will play its associated sound.

Prototyping and Early Processing Development (Mariyam): My task for this project was transition the code from Unity to Processing. We started this project out in Unity however due to technical difficulties we chose to transfer over to Processing. The unity code laid out the groundwork for our submarine game in which a played controls the submarine and shoots octopuses to collect points. I initiated the transfer by creating a base Bubble class, Bullet class and SillySubbbies main file. These classes created a very basic outline for what our game was going to grow into. There was a basic game interface and keyboard input that would be used to play the game. The code I created helped my partners to then respectively work on their tasks of Animation, GUI, data etc.

Animation Hierarchy (Lohit): The Animation Hierarchy has two layers: the submarine and its surrounding fish. Due to our implementation of submarine movement, we could not use any sort of translate() functions to move our fish. Instead, we use a shallow copy of the submarine's position PVector, a 2-vector that represents the submarine's position on the screen. We move the fish relative to this vector's coordinates by adding displacement functions in the x and y coordinates. We  give the fish a periodic path around the submarine to make it seem like the fish are following the submarine around.

Collision Detection (Lohit): I also implemented a Box Collider class that checked for collisions between the octopuses and the player or torpedoes shot by the player. This box collider updates its position with its attached object via a shallow copy of that object's position vector. This allows simple and fast movement between objects. I have also placed multiple box colliders on the player to more closely fit the player character's geometry. I did not add more colliders to the octopuses in a similar way as it caused a significant performance decrease. This was an unexpected challenge that was never resolved, as I just gave the enemies one functional but not geometrically accurate box collider.